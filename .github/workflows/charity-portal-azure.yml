# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Charity Portal CI/CD

on:
  push:
    paths:
      - "CharityPortal/**"
      - .github/workflows/charity-portal-azure.yml
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    working-directory: CharityPortal
env:
  IMAGE_NAME: charity-portal
  RESOURCE_GROUP: bzsoswaw
  ASPNETCORE_ENVIRONMENT: Development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    - name: Build
      run: go build -v ./...
      working-directory: ./CharityPortal

    - name: Test
      run: go test -v ./...
      working-directory: ./CharityPortal

  deploy:
    name: Push to ACR & Deploy (main branch only)
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Log into ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACR_ENDPOINT }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build Docker image
        run: docker build . -t ${{ secrets.ACR_ENDPOINT }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: Push Docker image
        run: docker push ${{ secrets.ACR_ENDPOINT }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      - name: Deploy Bicep
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./CharityPortal/infra.bicep
          parameters: >
            image=${{ secrets.ACR_ENDPOINT }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            name=${{ env.IMAGE_NAME }}
            acrendpoint=${{ secrets.ACR_ENDPOINT }}
            acrlogin=${{ secrets.ACR_USERNAME }}
            acrpassword=${{ secrets.ACR_PASSWORD }}
            dbAdminPassword=${{ secrets.DB_ADMIN_PASSWORD }}
            dbServerName=foodbank-postgres
            dbName=foodbankdb
            vnetName=foodbank-vnet
            subnetDbName=postgres-subnet
            subnetAppName=containerapp-subnet
          failOnStdErr: false
      - name: Show FQDN
        run: | 
          echo "FQDN: ${{ steps.deploy.outputs.fqdn }}"
